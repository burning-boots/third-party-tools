/**
 * CSS Compressor 3.0
 * January 03, 2011
 * Corey Hart @ http://www.codenothing.com
 *
 * @class Selectors
 */
{
	// All element selectors should be lowercase
	"parse": {
		"input": {
			"params": [ "INPUT" ],
			"expect": "input"
		},
		"font": {
			"params": [ "FONT" ],
			"expect": "font"
		},
		"class": {
			"params": [ "INPUT.testclass" ],
			"expect": "input.testclass"
		},
		"pseudo": {
			"params": [ "A:active,B:first-child" ],
			"expect": "a:active,b:first-child"
		},
		"complex": {
			"params": [ "BODY>DIV:first-child+A:active * P:first-child" ],
			"expect": "body>div:first-child+a:active * p:first-child"
		},
		"id": {
			"params": [ "BODY#BODY>DIV.CLASS * A#ID>P.CLASS" ],
			"expect": "body#BODY>div.CLASS * a#ID>p.CLASS"
		}
	},

	// Converting selector id attributes to hash 
	"idAttribute": {
		"simple": {
			"token": true,
			"params": [ "div[id=#{token}testing#{token}] p" ],
			"expect": "div#testing p"
		},
		"multiple": {
			"token": true,
			"params": [ "div[id=#{token}one#{token}] p[id=#{token}two#{token}] a b pre[id=#{token}three#{token}]" ],
			"expect": "div#one p#two a b pre#three"
		},
		"nothing": {
			"token": true,
			"params": [ "div[id=#{token}test spacing#{token}] p" ],
			"expect": "div[id=#{token}test spacing#{token}] p"
		}
	},

	// Converting class attributes to selector form
	"classAttribute": {
		"simple": {
			"token": true,
			"params": [ "div[class=#{token}testing#{token}] p" ],
			"expect": "div.testing p"
		},
		"multiple inner": {
			"token": true,
			"params": [ "div[class=#{token}testing\\ multiple\\ classes#{token}] p" ],
			"expect": "div.testing.multiple.classes p"
		},
		"multiple": {
			"token": true,
			"params": [ "div[class=#{token}testing\\ multiple\\ classes#{token}] p[class=#{token}one\\ two\\ three#{token}] a b" ],
			"expect": "div.testing.multiple.classes p.one.two.three a b"
		},
		"nothing": {
			"token": true,
			"params": [ "div[class=#{token}dont.change#{token}] p" ],
			"expect": "div[class=#{token}dont.change#{token}] p"
		}
	},

	// The assumption being that id is unique, so no need to nest it
	"strictid": {
		"basic": {
			"params": [ "body>div#elem p" ],
			"expect": "#elem p"
		},
		"comma": {
			"params": [ "span.class,div#elem p" ],
			"expect": "span.class,#elem p"
		},
		"double": {
			"params": [ "span.class #test,div#elem p" ],
			"expect": "#test,#elem p"
		},
		"nested": {
			"params": [ "span.class #test div#elem p" ],
			"expect": "#elem p"
		},
		"start": {
			"params": [ "#test div.elem p" ],
			"expect": "#test div.elem p"
		},
		"url": {
			"params": [ "#test a[url=http://www.example.com/\\#hashtag] div#elem p" ],
			"expect": "#elem p"
		},
		"url nothing": {
			"params": [ "body a[url=http://www.example.com/\\#hashtag] div.class p" ],
			"expect": "body a[url=http://www.example.com/\\#hashtag] div.class p"
		},
		"nothing": {
			"params": [ "html body div.class, body > q, i ~ b + a" ],
			"expect": "html body div.class, body > q, i ~ b + a"
		}
	},

	// Remove repeated selectors
	"repeats": {
		"1": {
			"params": [ "#one,#two,#three,#one,#five" ],
			"expect": "#one,#two,#three,#five"
		},
		"2": {
			"params": [ "div.class>p.other,span.something,div.class>p.other,q,b,i,div.class>p.other" ],
			"expect": "div.class>p.other,span.something,q,b,i"
		},
		"do nothing": {
			"params": [ "#one,#two,#three,#four,#five" ],
			"expect": "#one,#two,#three,#four,#five"
		}
	},

	// IE coughs up if there is no space after a pseudo selector
	"pseudoSpace": {
		"first-letter comma": {
			"params": [ "a:first-letter,a,b" ],
			"expect": "a:first-letter ,a,b"
		},
		"first-letter comma exists": {
			"params": [ "a:first-letter ,a,b" ],
			"expect": "a:first-letter ,a,b"
		},
		"first-line tree": {
			"params": [ "a:first-line>a" ],
			"expect": "a:first-line>a"
		},
		"first-letter adds": {
			"params": [ "a:first-letter+a" ],
			"expect": "a:first-letter+a"
		},
		"first-line empty": {
			"params": [ "a:first-line" ],
			"expect": "a:first-line "
		},
		"first-letter space": {
			"params": [ "a:first-letter b" ],
			"expect": "a:first-letter b"
		},
		"multiple": {
			"params": [ "a:hover>b:first-letter.test+pre.old:first-line" ],
			"expect": "a:hover>b:first-letter.test+pre.old:first-line "
		},
		"nothing": {
			"params": [ "a:first-line.test" ],
			"expect": "a:first-line.test"
		},
		"empty": {
			"params": [ "" ],
			"expect": ""
		}
	},

	// Combination of all Selectors methods
	"selectors": {
		"Lowercase and pseudo": {
			"params": [
				[ "A:first-line>B:first-letter.test+PRE.old:first-letter", "A:first-line B" ]
			],
			"join": "|",
			"expect": "a:first-line>b:first-letter.test+pre.old:first-letter |a:first-line b"
		}
	}
}
